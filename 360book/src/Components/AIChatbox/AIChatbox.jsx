import React, { useState } from 'react';
import axios from 'axios';
import logo from '../../assets/BGSEARCH.png';
import './AIChatbox.css';

const AIChatbox = () => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isMinimized, setIsMinimized] = useState(false);
    const [isExpanded, setIsExpanded] = useState(false);
    const [isCollapsed, setIsCollapsed] = useState(false);

    const suggestedQuestions = [
        "T·ªï h·ª£p m√¥n n√†o ph√π h·ª£p v·ªõi ng√†nh CNTT?",
        "ƒêi·ªÉm chu·∫©n c√°c tr∆∞·ªùng top ƒë·∫ßu nƒÉm 2023?",
        "C√°ch t√≠nh ƒëi·ªÉm x√©t tuy·ªÉn nh∆∞ th·∫ø n√†o?",
        "N√™n ch·ªçn tr∆∞·ªùng n√†o v·ªõi ƒëi·ªÉm s·ªë c·ªßa t√¥i?",
    ];

    const sendMessage = async (e) => {
        e.preventDefault();
        if (!input.trim()) return;

        const userMessage = { text: input, sender: 'user' };
        setMessages(prev => [...prev, userMessage]);
        setInput('');
        setIsLoading(true);

        try {
            // G·ª≠i c√¢u h·ªèi l√™n backend
            const res = await axios.post('/api/ask-ai', { question: input });
            // Gi·∫£ s·ª≠ backend tr·∫£ v·ªÅ { answer: "..." }
            const aiMessage = { text: res.data.answer, sender: 'ai' };
            setMessages(prev => [...prev, aiMessage]);
        } catch (error) {
            console.error('Chat error:', error);
            const errorMessage = {
                text: "Xin l·ªói, b·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi theo c√°ch kh√°c ƒë∆∞·ª£c kh√¥ng?",
                sender: 'ai'
            };
            setMessages(prev => [...prev, errorMessage]);
        }

        setIsLoading(false);
    };

    const handleSuggestedQuestion = async (question) => {
        setInput(question);
        await sendMessage({ preventDefault: () => { } });
    };

    const toggleMinimize = () => {
        setIsMinimized(!isMinimized);
        if (isExpanded) setIsExpanded(false);
    };

    const toggleExpand = () => {
        setIsExpanded(!isExpanded);
        if (isMinimized) setIsMinimized(false);
    };

    const clearChat = () => {
        setMessages([]);
    };

    if (isMinimized) {
        return (
            <div className="chatbox-minimized">
                <div className="chatbox-minimized-header">
                    <div className="chatbox-minimized-title">
                        <span className="ai-avatar">ü§ñ</span>
                        <span>T∆∞ v·∫•n tuy·ªÉn sinh</span>
                    </div>
                    <div className="chatbox-minimized-controls">
                        <button
                            className="control-btn expand-btn"
                            onClick={toggleMinimize}
                            title="M·ªü r·ªông"
                        >
                            ‚¨ÜÔ∏è
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className={`chatbox-container ${isExpanded ? 'expanded' : ''}`}>
            <div className="chatbox-header">
                <div className="chatbox-header-left">
                    <span className="ai-avatar">ü§ñ</span>
                    <div className="chatbox-title">
                        <h3>T∆∞ v·∫•n tuy·ªÉn sinh 360BOOK</h3>
                        <span className="status-indicator">
                            <span className="online-dot"></span>
                            ƒêang ho·∫°t ƒë·ªông
                        </span>
                    </div>
                </div>
                <div className="chatbox-controls">
                    <button
                        className="control-btn clear-btn"
                        onClick={clearChat}
                        title="X√≥a chat"
                    >
                        üóëÔ∏è
                    </button>
                    <button
                        className="control-btn expand-btn"
                        onClick={toggleExpand}
                        title={isExpanded ? "Thu nh·ªè" : "M·ªü r·ªông"}
                    >
                        {isExpanded ? '‚§ì' : '‚§¢'}
                    </button>
                    <button
                        className="control-btn minimize-btn"
                        onClick={toggleMinimize}
                        title="Thu nh·ªè"
                    >
                        ‚¨áÔ∏è
                    </button>
                </div>
            </div>

            <div className="chatbox-messages">
                {messages.length === 0 ? (
                    <div className="chatbox-welcome">
                        <div className="welcome-icon">
                            <img src={logo} alt="360BOOK Logo" />
                        </div>
                        <h4>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi 360BOOK!</h4>
                        <p>T√¥i l√† tr·ª£ l√Ω AI, s·∫µn s√†ng t∆∞ v·∫•n v·ªÅ tuy·ªÉn sinh ƒë·∫°i h·ªçc</p>
                        <div className="suggested-questions">
                            <p>C√¢u h·ªèi g·ª£i √Ω:</p>
                            <div className="question-buttons">
                                {suggestedQuestions.map((question, index) => (
                                    <button
                                        key={index}
                                        onClick={() => handleSuggestedQuestion(question)}
                                        className="suggestion-btn"
                                        disabled={isLoading}
                                    >
                                        {question}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>
                ) : (
                    messages.map((message, index) => (
                        <div key={index} className={`message ${message.sender}`}>
                            <div className="message-avatar">
                                {message.sender === 'user' ? 'üë§' : 'ü§ñ'}
                            </div>
                            <div className="message-content">
                                {message.text}
                            </div>
                        </div>
                    ))
                )}
                {isLoading && (
                    <div className="message ai">
                        <div className="message-avatar">ü§ñ</div>
                        <div className="message-content">
                            <div className="typing-indicator">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            <form onSubmit={sendMessage} className="chatbox-input">
                <div className="input-wrapper">
                    <input
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        placeholder="H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ tuy·ªÉn sinh..."
                        disabled={isLoading}
                    />
                    <button type="submit" disabled={isLoading || !input.trim()}>
                        <span className="send-icon">üì§</span>
                    </button>
                </div>
            </form>
        </div>
    );
};

export default AIChatbox;