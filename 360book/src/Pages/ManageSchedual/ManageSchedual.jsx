import React, { useEffect, useState } from "react";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';

const EVENTS = [
    "K·ª≥ thi t·ªët nghi·ªáp THPT",
    "M·ªü ƒëƒÉng k√Ω nguy·ªán v·ªçng",
    "H·∫°n cu·ªëi ƒëƒÉng k√Ω nguy·ªán v·ªçng",
    "C√¥ng b·ªë ƒëi·ªÉm thi",
    "C√¥ng b·ªë ƒëi·ªÉm chu·∫©n",
    "X√©t tuy·ªÉn b·ªï sung",
    "Nh·∫≠p h·ªçc ƒë·ª£t 1",
    "Nh·∫≠p h·ªçc ƒë·ª£t 2",
];

const ManageSchedule = () => {
    const [dates, setDates] = useState(Array(EVENTS.length).fill(""));
    const [loadingIndexes, setLoadingIndexes] = useState([]);
    const [datesAvailable, setDatesFromApi] = useState(Array(EVENTS.length).fill(""));

    const handleDateChange = (index, value) => {
        const newDates = [...dates];
        newDates[index] = value;
        setDates(newDates);
    };

    useEffect(() => {
        const fetchDates = async () => {
            try {
                const res = await axios.get("/api/schedule");
                const dataFromApi = res.data.data || [];
                const newDatesFromApi = EVENTS.map(eventName => {
                    const found = dataFromApi.find(item => item.eventName === eventName);
                    return found ? found.eventDate.slice(0,10) : "";
                });

                setDatesFromApi(newDatesFromApi);
            } catch (error) {
                toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªãch t·ª´ server");
                console.error(error);
            }
        };

        fetchDates();
    }, []);


    const handleSave = async (index) => {
        const date = dates[index];
        if (!date) {
            toast.error("Vui l√≤ng ch·ªçn ng√†y cho s·ª± ki·ªán.");
            return;
        }
        try {
            setLoadingIndexes((prev) => [...prev, index]);
            await axios.post("/api/schedule", {
                    eventName: EVENTS[index],
                    eventDate: date,
            });
            toast.success(`T·∫°o l·ªãch "${EVENTS[index]}" th√†nh c√¥ng!`);
        } catch (error) {
            console.error(error);
            toast.error(`L·ªói khi t·∫°o l·ªãch "${EVENTS[index]}".`);
        } finally {
            setLoadingIndexes((prev) => prev.filter(i => i !== index));
        }
    };

    return (
        <div className="container mt-4">
            <ToastContainer />
            <h2 className="text-center mb-4">üóìÔ∏è Trang Admin - T·∫°o l·ªãch ƒë·∫øm ng∆∞·ª£c</h2>

            <table className="table table-bordered">
                <thead className="table-light">
                    <tr>
                        <th>S·ª± ki·ªán</th>
                        <th>Ng√†y C√≥ S·∫µn</th>
                        <th>Ch·ªçn ng√†y</th>
                        <th>H√†nh ƒë·ªông</th>
                    </tr>
                </thead>
                <tbody>
                    {EVENTS.map((event, index) => (
                        <tr key={index}>
                            <td>{event}</td>
                            <td>{datesAvailable[index] || <i>Ch∆∞a c√≥ ng√†y</i>}</td>
                            <td>
                                <input
                                    type="date"
                                    className="form-control"
                                    value={dates[index]}
                                    onChange={(e) => handleDateChange(index, e.target.value)}
                                />
                            </td>
                            <td>
                                <button
                                    className="btn btn-success"
                                    disabled={loadingIndexes.includes(index)}
                                    onClick={() => handleSave(index)}
                                >
                                    {loadingIndexes.includes(index) ? "ƒêang l∆∞u..." : "L∆∞u"}
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default ManageSchedule;
