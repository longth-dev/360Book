import React, { useEffect, useState } from "react";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';

const EVENTS = [
    "Ng√†y Thi t·ªët nghi·ªáp THPT 2025",
    "Ng√†y ƒêƒÉng k√Ω nguy·ªán v·ªçng x√©t tuy·ªÉn ƒêH 2025",
    "Ng√†y C√¥ng b·ªë ƒëi·ªÉm thi t·ªët nghi·ªáp THPT 2025",
    "Ng√†y C√¥ng b·ªë ƒëi·ªÉm chu·∫©n ƒê·∫°i h·ªçc 2025",
    "Ng√†y ƒê√°nh Gi√° NƒÉng L·ª±c - t·∫°i H·ªì Ch√≠ Minh - ƒê·ª£t 1 2025",
    "Ng√†y ƒê√°nh Gi√° NƒÉng L·ª±c - t·∫°i H·ªì Ch√≠ Minh - ƒê·ª£t 2 2025",
    "Ng√†y ƒê√°nh Gi√° NƒÉng L·ª±c - t·∫°i H√† N·ªôi - ƒê·ª£t 1 2025",
    "Ng√†y ƒê√°nh Gi√° NƒÉng L·ª±c - t·∫°i H√† N·ªôi - ƒê·ª£t 2 2025",
];

const ManageSchedule = () => {
    const [dates, setDates] = useState(EVENTS.map(() => ({ startDate: "", endDate: "" })));
    const [loadingIndexes, setLoadingIndexes] = useState([]);
    const [datesAvailable, setDatesAvailable] = useState(EVENTS.map(() => ({ startDate: "", endDate: "" })));
    const [selectedIndex, setSelectedIndex] = useState(0);

    const handleDateChange = (index, field, value) => {
        const newDates = [...dates];
        newDates[index] = { ...newDates[index], [field]: value };
        setDates(newDates);
    };
    useEffect(() => {
        const fetchDates = async () => {
            try {
                const res = await axios.get("/api/uni/schedule");
                const dataFromApi = res.data.data || [];

                const newDatesFromApi = EVENTS.map(eventName => {
                    const found = dataFromApi.find(item => item.eventName === eventName);
                    return found
                        ? {
                            startDate: found.startDate ? found.startDate.slice(0, 10) : "",
                            endDate: found.endDate ? found.endDate.slice(0, 10) : ""
                        }
                        : { startDate: "", endDate: "" };
                });

                setDatesAvailable(newDatesFromApi);
            } catch (error) {
                toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªãch t·ª´ server");
                console.error(error);
            }
        };

        fetchDates();
    }, []);

    const handleSave = async (index) => {
        const { startDate, endDate } = dates[index];
        if (!startDate || !endDate) {
            toast.error("Vui l√≤ng ch·ªçn c·∫£ ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c.");
            return;
        }

        try {
            setLoadingIndexes((prev) => [...prev, index]);
            await axios.post("/api/uni/schedule", {
                content: EVENTS[index],
                startDate,
                endDate,
                mainSchedule: true
            });
            toast.success(`L∆∞u l·ªãch "${EVENTS[index]}" th√†nh c√¥ng!`);
            const newDatesAvailable = [...datesAvailable];
            newDatesAvailable[index] = { startDate, endDate };
            setDatesAvailable(newDatesAvailable);
        } catch (error) {
            console.error(error);
            toast.error(`L·ªói khi l∆∞u l·ªãch "${EVENTS[index]}".`);
        } finally {
            setLoadingIndexes((prev) => prev.filter(i => i !== index));
        }
    };

    return (
        <div className="container mt-4">
            <ToastContainer />
            <h2 className="text-center mb-4">üóìÔ∏è Trang Admin - T·∫°o l·ªãch ƒë·∫øm ng∆∞·ª£c</h2>

            <div className="row">
                <div className="col-md-3">
                    <ul className="list-group">
                        {EVENTS.map((event, index) => (
                            <li
                                key={index}
                                className={`list-group-item ${selectedIndex === index ? "active" : ""}`}
                                style={{ cursor: "pointer" }}
                                onClick={() => setSelectedIndex(index)}
                            >
                                {event}
                            </li>
                        ))}
                    </ul>
                </div>
                <div className="col-md-9">
                    <div className="card shadow-sm p-3">
                        <h5>{EVENTS[selectedIndex]}</h5>
                        <p>
                            <strong>Ng√†y c√≥ s·∫µn: </strong>
                            {datesAvailable[selectedIndex].startDate || datesAvailable[selectedIndex].endDate
                                ? `${datesAvailable[selectedIndex].startDate} - ${datesAvailable[selectedIndex].endDate}`
                                : <i>Ch∆∞a c√≥ ng√†y</i>}
                        </p>
                        <div className="mb-3">
                            <label className="form-label">Ng√†y b·∫Øt ƒë·∫ßu</label>
                            <input
                                type="datetime-local"
                                className="form-control"
                                value={dates[selectedIndex].startDate || ""}
                                onChange={(e) => handleDateChange(selectedIndex, "startDate", e.target.value)}
                            />
                        </div>
                        <div className="mb-3">
                            <label className="form-label">Ng√†y k·∫øt th√∫c</label>
                            <input
                                type="datetime-local"
                                className="form-control"
                                value={dates[selectedIndex].endDate || ""}
                                min={dates[selectedIndex].startDate || ""}
                                onChange={(e) => handleDateChange(selectedIndex, "endDate", e.target.value)}
                            />
                        </div>
                        <button
                            className="btn btn-success"
                            disabled={loadingIndexes.includes(selectedIndex)}
                            onClick={() => handleSave(selectedIndex)}
                        >
                            {loadingIndexes.includes(selectedIndex) ? "ƒêang l∆∞u..." : "L∆∞u"}
                        </button>
                    </div>
                </div>
            </div>
        </div>

    );
};

export default ManageSchedule;
