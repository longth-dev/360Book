import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import Navbar from "../../Components/Navbar/Navbar";
import Footer from "../../Components/Footer/Footer";
import "./SubjectCombinationViewer.css";

export default function SubjectCombinationViewer() {
    const [selectedCombo, setSelectedCombo] = useState("");
    const [subjectCombinations, setSubjectCombinations] = useState([]);
    const [universities, setUniversities] = useState([]);
    const [loadingCombos, setLoadingCombos] = useState(false);
    const [loadingUniversities, setLoadingUniversities] = useState(false);
    const [error, setError] = useState(null);

    // Fetch danh s√°ch t·ªï h·ª£p m√¥n
    useEffect(() => {
        setLoadingCombos(true);
        setError(null);
        axios.get("https://your-api/subject-combinations")
            .then(res => {
                setSubjectCombinations(res.data.data || []);
                toast.success("T·∫£i danh s√°ch t·ªï h·ª£p m√¥n th√†nh c√¥ng");
            })
            .catch(err => {
                setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªï h·ª£p m√¥n. Vui l√≤ng th·ª≠ l·∫°i sau.");
                setSubjectCombinations([]);
                toast.error("T·∫£i danh s√°ch t·ªï h·ª£p m√¥n th·∫•t b·∫°i");
            })
            .finally(() => setLoadingCombos(false));
    }, []);

    // Fetch danh s√°ch tr∆∞·ªùng ƒë·∫°i h·ªçc theo t·ªï h·ª£p m√¥n
    useEffect(() => {
        if (!selectedCombo) {
            setUniversities([]);
            return;
        }
        setLoadingUniversities(true);
        setError(null);
        axios.get(`https://your-api/universities?combo=${selectedCombo}`)
            .then(res => {
                setUniversities(res.data.data || []);
                toast.success(`T·∫£i danh s√°ch tr∆∞·ªùng cho t·ªï h·ª£p ${selectedCombo} th√†nh c√¥ng`);
            })
            .catch(err => {
                setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr∆∞·ªùng ƒë·∫°i h·ªçc. Vui l√≤ng th·ª≠ l·∫°i sau.");
                setUniversities([]);
                toast.error("T·∫£i danh s√°ch tr∆∞·ªùng th·∫•t b·∫°i");
            })
            .finally(() => setLoadingUniversities(false));
    }, [selectedCombo]);

    const selectedComboData = subjectCombinations.find(combo => combo.id === selectedCombo);

    return (
        <>
            <Navbar />
            <ToastContainer position="top-right" autoClose={5000} />
            <div className="subject-combination-viewer" style={{ background: '#fff', minHeight: '100vh' }}>
                <div className="subject-combination-container">
                    <div className="subject-combination-header">
                        <h2>Tra c·ª©u t·ªï h·ª£p m√¥n x√©t tuy·ªÉn</h2>
                        <p>Ch·ªçn t·ªï h·ª£p m√¥n ƒë·ªÉ xem danh s√°ch c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc x√©t tuy·ªÉn</p>
                    </div>
                    <div className="subject-selector-wrapper">
                        <div className="subject-selector-label">
                            Ch·ªçn t·ªï h·ª£p m√¥n x√©t tuy·ªÉn
                        </div>
                        {loadingCombos ? (
                            <div className="loader-container" style={{ minHeight: 80, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                                <div className="loader"></div>
                            </div>
                        ) : (
                            <select
                                className="subject-selector"
                                value={selectedCombo}
                                onChange={e => setSelectedCombo(e.target.value)}
                                disabled={loadingCombos}
                            >
                                <option value="">-- Ch·ªçn t·ªï h·ª£p m√¥n --</option>
                                {subjectCombinations.map((combo) => (
                                    <option key={combo.id} value={combo.id}>
                                        {combo.id} - {combo.name}
                                    </option>
                                ))}
                            </select>
                        )}
                    </div>
                    {/* X√≥a d√≤ng l∆∞u √Ω khi c√≥ l·ªói */}
                    {selectedCombo ? (
                        <div className="results-section">
                            <div className="results-header">
                                <div>
                                    <h3 className="results-title">
                                        K·∫øt qu·∫£ tra c·ª©u t·ªï h·ª£p m√¥n {selectedCombo}
                                        {selectedComboData && ` - ${selectedComboData.name}`}
                                    </h3>
                                    <div className="results-count">
                                        {loadingUniversities ? 'ƒêang t·∫£i...' : `${universities.length} tr∆∞·ªùng ƒë·∫°i h·ªçc`}
                                    </div>
                                </div>
                            </div>
                            {loadingUniversities ? (
                                <div className="loader-container" style={{ minHeight: 120, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                                    <div className="loader"></div>
                                </div>
                            ) : universities.length > 0 ? (
                                <div className="table-responsive">
                                    <table className="universities-table">
                                        <thead>
                                            <tr>
                                                <th>STT</th>
                                                <th>T√™n tr∆∞·ªùng</th>
                                                <th>M√£ tr∆∞·ªùng</th>
                                                <th>Ng√†nh x√©t tuy·ªÉn</th>
                                                <th>Thao t√°c</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {universities.map((uni, index) => (
                                                <tr key={uni.id}>
                                                    <td>{index + 1}</td>
                                                    <td className="university-name">{uni.tenTruong}</td>
                                                    <td>{uni.maTruong}</td>
                                                    <td className="majors-list">
                                                        {Array.isArray(uni.majors)
                                                            ? uni.majors.join(", ")
                                                            : uni.majors || 'Ch∆∞a c·∫≠p nh·∫≠t'}
                                                    </td>
                                                    <td>
                                                        <Link
                                                            to={`/university-detail/${selectedCombo}/${uni.id}`}
                                                            className="detail-btn"
                                                        >
                                                            Xem chi ti·∫øt
                                                        </Link>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            ) : (
                                <div className="empty-state">
                                    <div className="empty-state-icon">üè´</div>
                                    <div className="empty-state-text">Kh√¥ng c√≥ tr∆∞·ªùng n√†o</div>
                                    <div className="empty-state-subtext">
                                        Ch∆∞a c√≥ tr∆∞·ªùng ƒë·∫°i h·ªçc n√†o x√©t tuy·ªÉn t·ªï h·ª£p m√¥n n√†y
                                    </div>
                                </div>
                            )}
                        </div>
                    ) : (
                        <div className="empty-state">
                            <div className="empty-state-icon">üìö</div>
                            <div className="empty-state-text">Ch∆∞a c√≥ d·ªØ li·ªáu</div>
                            <div className="empty-state-subtext">
                                Vui l√≤ng ch·ªçn t·ªï h·ª£p m√¥n ƒë·ªÉ xem k·∫øt qu·∫£ tra c·ª©u
                            </div>
                        </div>
                    )}
                </div>
            </div>
            <Footer />
        </>
    );
} 