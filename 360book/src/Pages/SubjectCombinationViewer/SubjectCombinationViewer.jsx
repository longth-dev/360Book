import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
import Navbar from "../../Components/Navbar/Navbar";
import Footer from "../../Components/Footer/Footer";
import "./SubjectCombinationViewer.css";

export default function SubjectCombinationViewer() {
    const [selectedCombo, setSelectedCombo] = useState("");
    const [subjectCombinations, setSubjectCombinations] = useState([]);
    const [universities, setUniversities] = useState([]);
    const [loadingCombos, setLoadingCombos] = useState(false);
    const [loadingUniversities, setLoadingUniversities] = useState(false);
    const [error, setError] = useState(null);

    // Fetch danh s√°ch t·ªï h·ª£p m√¥n
    useEffect(() => {
        setLoadingCombos(true);
        setError(null);
        axios.get("api/uni/v1/subject-combo")
            .then(res => {
                setSubjectCombinations(res.data.data || []);
            })
            .catch(err => {
                setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªï h·ª£p m√¥n. Vui l√≤ng th·ª≠ l·∫°i sau.");
                setSubjectCombinations([]);
            })
            .finally(() => setLoadingCombos(false));
    }, []);

    // Fetch danh s√°ch tr∆∞·ªùng ƒë·∫°i h·ªçc theo t·ªï h·ª£p m√¥n
    useEffect(() => {
        if (!selectedCombo) {
            setUniversities([]);
            return;
        }
        setLoadingUniversities(true);
        setError(null);
        axios.get(`/api/uni/v1/by-combo?comboCode=${selectedCombo}`)
            .then(res => {
                const detailList = res.data.data.detailResponseList || [];
                const mapped = detailList.map(item => ({
                    ...item.university,
                    total: item.total
                }));
                setUniversities(mapped);
            })
            .catch(err => {
                setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr∆∞·ªùng ƒë·∫°i h·ªçc. Vui l√≤ng th·ª≠ l·∫°i sau.");
                setUniversities([]);
            })
            .finally(() => setLoadingUniversities(false));
    }, [selectedCombo]);

    const selectedComboData = subjectCombinations.find(combo => combo.id === selectedCombo);

    return (
        <>
            <Navbar />
            <div className="subject-combination-viewer" style={{ background: '#fff', minHeight: '100vh' }}>
                <div className="subject-combination-container">
                    <div className="subject-combination-header">
                        <h2>Tra c·ª©u t·ªï h·ª£p m√¥n x√©t tuy·ªÉn</h2>
                        {/* <p>Ch·ªçn t·ªï h·ª£p m√¥n ƒë·ªÉ xem danh s√°ch c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc x√©t tuy·ªÉn</p> */}
                    </div>
                    {/* X√ìA PH·∫¶N CH·ªåN T·ªî H·ª¢P M√îN */}
                    {/* <div className="subject-selector-wrapper">
                        <div className="subject-selector-label">
                            Ch·ªçn t·ªï h·ª£p m√¥n x√©t tuy·ªÉn
                        </div>
                        <select
                            className="subject-selector"
                            value={selectedCombo}
                            onChange={e => setSelectedCombo(e.target.value)}
                            disabled={loadingCombos}
                        >
                            <option value="">-- Ch·ªçn t·ªï h·ª£p m√¥n --</option>
                            {subjectCombinations.map((combo) => (
                                <option key={combo.codeCombination} value={combo.codeCombination}>
                                    {combo.codeCombination} - {combo.subjectName.join(", ")}
                                </option>

                            ))}
                        </select>
                        {loadingCombos && (
                            <div className="text-center mt-2">
                                <small className="text-muted">ƒêang t·∫£i danh s√°ch t·ªï h·ª£p m√¥n...</small>
                            </div>
                        )}
                    </div> */}
                    {error && (
                        <div className="alert alert-warning" role="alert">
                            <strong>L∆∞u √Ω:</strong> {error}
                        </div>
                    )}
                    {/* Gi·ªØ l·∫°i ph·∫ßn hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥ selectedCombo, ho·∫∑c empty-state n·∫øu kh√¥ng c√≥ */}
                    {selectedCombo ? (
                        <div className="results-section">
                            <div className="results-header">
                                <div>
                                    <h3 className="results-title">
                                        K·∫øt qu·∫£ tra c·ª©u t·ªï h·ª£p m√¥n {selectedCombo}
                                        {selectedComboData && ` - ${selectedComboData.name}`}
                                    </h3>
                                    <div className="results-count">
                                        {loadingUniversities ? 'ƒêang t·∫£i...' : `${universities.length} tr∆∞·ªùng ƒë·∫°i h·ªçc`}
                                    </div>
                                </div>
                            </div>
                            {loadingUniversities ? (
                                <div className="text-center py-4">
                                    <div className="spinner-border text-primary" role="status">
                                        <span className="visually-hidden">ƒêang t·∫£i...</span>
                                    </div>
                                    <p className="mt-2 text-muted">ƒêang t·∫£i danh s√°ch tr∆∞·ªùng ƒë·∫°i h·ªçc...</p>
                                </div>
                            ) : universities.length > 0 ? (
                                <div className="table-responsive">
                                    <table className="universities-table">
                                        <thead>
                                            <tr>
                                                <th>STT</th>
                                                <th>T√™n tr∆∞·ªùng</th>
                                                <th>M√£ tr∆∞·ªùng</th>
                                                <th>Ng√†nh x√©t tuy·ªÉn</th>
                                                <th>Thao t√°c</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {universities.map((uni, index) => (
                                                <tr key={uni.universityId}>
                                                    <td>{index + 1}</td>
                                                    <td className="university-name">{uni.universityName}</td>
                                                    <td>{uni.code}</td>
                                                    <td className="majors-list">
                                                        {Array.isArray(uni.majors)
                                                            ? uni.majors.join(", ")
                                                            : uni.majors || 'Ch∆∞a c·∫≠p nh·∫≠t'}
                                                    </td>
                                                    <td>
                                                        <Link
                                                            to={`/danh-sach-truong/${uni.universityId}`}
                                                            className="detail-btn"
                                                        >
                                                            Xem chi ti·∫øt
                                                        </Link>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            ) : (
                                <div className="empty-state">
                                    <div className="empty-state-icon">üè´</div>
                                    <div className="empty-state-text">Kh√¥ng c√≥ tr∆∞·ªùng n√†o</div>
                                    <div className="empty-state-subtext">
                                        Ch∆∞a c√≥ tr∆∞·ªùng ƒë·∫°i h·ªçc n√†o x√©t tuy·ªÉn t·ªï h·ª£p m√¥n n√†y
                                    </div>
                                </div>
                            )}
                        </div>
                    ) : (
                        <div className="empty-state">
                            <div className="empty-state-icon">üìö</div>
                            <div className="empty-state-text">Ch∆∞a c√≥ d·ªØ li·ªáu</div>
                            <div className="empty-state-subtext">
                                Vui l√≤ng ch·ªçn t·ªï h·ª£p m√¥n ƒë·ªÉ xem k·∫øt qu·∫£ tra c·ª©u
                            </div>
                        </div>
                    )}
                </div>
            </div>
            <Footer />
        </>
    );
}





